{"version":3,"sources":["features/posts/postsSlice.js","features/users/usersSlice.js","store.js","features/posts/AddPost.js","features/posts/PostAuthor.js","features/posts/TimeAgo.js","features/posts/ReactionButtons.js","features/posts/PostsList.js","App.js","index.js"],"names":["initialState","id","title","content","date","sub","Date","minutes","toISOString","reactions","thumbsUp","wow","heart","rocket","coffee","postsSlice","createSlice","name","reducers","postAdded","reducer","state","action","push","payload","prepare","userId","nanoid","reactionAdded","postId","reaction","existingPost","find","post","selectAllPosts","posts","actions","userSlice","selectAllUsers","users","store","configureStore","postsReducer","usersReducer","AddPost","dispatch","useDispatch","useState","setTitle","setContent","setUserId","canSave","Boolean","useSelector","userOptions","Box","sx","minWidth","FormControl","fullWidth","InputLabel","Select","labelId","value","label","onChange","e","target","map","user","MenuItem","console","log","Stack","component","onSubmit","preventDefault","m","spacing","Typography","variant","TextField","multiline","minRows","direction","Button","type","disabled","PostAuthor","author","TimeAgo","timestamp","timeAgo","parseISO","timePeriod","formatDistanceToNow","ReactionButtons","startIcon","color","onClick","PostsList","renderPosts","Card","CardContent","substring","App","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.faf8c430.chunk.js","sourcesContent":["import { createSlice, nanoid } from \"@reduxjs/toolkit\";\r\nimport { sub } from \"date-fns\";\r\n\r\nconst initialState = [\r\n  {\r\n    id: \"1\",\r\n    title: \"Title-1\",\r\n    content: \"Content-1\",\r\n    date: sub(new Date(), { minutes: 10 }).toISOString(),\r\n    reactions: {\r\n      thumbsUp: 0,\r\n      wow: 0,\r\n      heart: 0,\r\n      rocket: 0,\r\n      coffee: 0\r\n    }\r\n  },\r\n  {\r\n    id: \"2\",\r\n    title: \"Title-2\",\r\n    content: \"Content-2\",\r\n    date: sub(new Date(), { minutes: 5 }).toISOString(),\r\n    reactions: {\r\n      thumbsUp: 0,\r\n      wow: 0,\r\n      heart: 0,\r\n      rocket: 0,\r\n      coffee: 0\r\n    }\r\n  }\r\n];\r\n\r\nconst postsSlice = createSlice({\r\n  name: \"posts\",\r\n  initialState,\r\n  reducers: {\r\n    postAdded: {\r\n      reducer(state, action) {\r\n        state.push(action.payload);\r\n      },\r\n      prepare({ title, content, userId }) {\r\n        return {\r\n          payload: {\r\n            id: nanoid(),\r\n            title,\r\n            content,\r\n            userId,\r\n            date: new Date().toISOString(),\r\n            reactions: {\r\n              thumbsUp: 0,\r\n              wow: 0,\r\n              heart: 0,\r\n              rocket: 0,\r\n              coffee: 0\r\n            }\r\n          }\r\n        };\r\n      }\r\n    },\r\n    reactionAdded: (state, action) => {\r\n      const { postId, reaction } = action.payload;\r\n      const existingPost = state.find((post) => post.id === postId);\r\n      if (existingPost) {\r\n        existingPost.reactions[reaction]++;\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\nexport const selectAllPosts = (state) => state.posts;\r\nexport const { postAdded, reactionAdded } = postsSlice.actions;\r\nexport default postsSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = [\r\n  { id: 1, name: \"Dude Lebowski\" },\r\n  { id: 2, name: \"Neil Yound\" },\r\n  { id: 3, name: \"Dave Gray\" }\r\n];\r\n\r\nconst userSlice = createSlice({\r\n  name: \"users\",\r\n  initialState,\r\n  reducers: {}\r\n});\r\n\r\nexport const selectAllUsers = (state) => state.users;\r\nexport default userSlice.reducer;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport postsReducer from \"./features/posts/postsSlice\";\r\nimport usersReducer from \"./features/users/usersSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    posts: postsReducer,\r\n    users: usersReducer\r\n  }\r\n});\r\n","import {\r\n  Box,\r\n  Button,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  Stack,\r\n  TextField,\r\n  Typography,\r\n  MenuItem\r\n} from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { postAdded } from \"./postsSlice\";\r\nimport { selectAllUsers } from \"../users/usersSlice\";\r\n\r\nconst AddPost = () => {\r\n  const dispatch = useDispatch();\r\n  const [title, setTitle] = useState(\"\");\r\n  const [content, setContent] = useState(\"\");\r\n  const [userId, setUserId] = useState(\"\");\r\n  const canSave = Boolean(title) && Boolean(content) && Boolean(userId);\r\n\r\n  const users = useSelector(selectAllUsers);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (title && content) {\r\n      console.log(title, content);\r\n      dispatch(\r\n        postAdded({\r\n          title,\r\n          content,\r\n          userId\r\n        })\r\n      );\r\n    }\r\n\r\n    setTitle(\"\");\r\n    setContent(\"\");\r\n  };\r\n\r\n  const userOptions = (\r\n    <Box sx={{ minWidth: 120 }}>\r\n      <FormControl fullWidth>\r\n        <InputLabel id=\"select-users\">Author</InputLabel>\r\n        <Select\r\n          labelId=\"select-users\"\r\n          value={userId}\r\n          label=\"Author\"\r\n          onChange={(e) => setUserId(e.target.value)}\r\n        >\r\n          {users.map((user) => (\r\n            <MenuItem key={user.id} value={user.id}>\r\n              {user.name}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n\r\n  console.log(userId);\r\n\r\n  return (\r\n    <>\r\n      <Stack component=\"form\" onSubmit={handleSubmit} m={2} spacing={2}>\r\n        <Typography variant=\"h4\">Add Post</Typography>\r\n        <TextField\r\n          variant=\"outlined\"\r\n          label=\"Title\"\r\n          value={title}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n        />\r\n        <TextField\r\n          variant=\"outlined\"\r\n          label=\"Content\"\r\n          value={content}\r\n          multiline\r\n          minRows={3}\r\n          onChange={(e) => setContent(e.target.value)}\r\n        />\r\n        <Stack direction=\"row\" spacing={2}>\r\n          <Button variant=\"contained\" type=\"submit\" disabled={!canSave}>\r\n            Add Post\r\n          </Button>\r\n          {userOptions}\r\n        </Stack>\r\n      </Stack>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddPost;\r\n","import { Typography } from \"@mui/material\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectAllUsers } from \"../users/usersSlice\";\r\n\r\nconst PostAuthor = ({ userId }) => {\r\n  const users = useSelector(selectAllUsers);\r\n  const author = users.find((user) => user.id === userId);\r\n\r\n  return (\r\n    <>\r\n      <Typography variant=\"body1\">\r\n        by {author ? author.name : \"unknown author\"}\r\n      </Typography>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostAuthor;\r\n","import { Typography } from \"@mui/material\";\r\nimport { parseISO, formatDistanceToNow } from \"date-fns\";\r\n\r\nconst TimeAgo = ({ timestamp }) => {\r\n  let timeAgo = \"\";\r\n  if (timestamp) {\r\n    const date = parseISO(timestamp);\r\n    const timePeriod = formatDistanceToNow(date);\r\n    timeAgo = `${timePeriod} ago`;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Typography variant=\"body1\">{timeAgo}</Typography>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TimeAgo;\r\n","import { useDispatch } from \"react-redux\";\r\nimport { reactionAdded } from \"./postsSlice\";\r\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\r\nimport ThumbUpIcon from \"@mui/icons-material/ThumbUp\";\r\nimport MoodIcon from \"@mui/icons-material/Mood\";\r\nimport RocketLaunchIcon from \"@mui/icons-material/RocketLaunch\";\r\nimport CoffeeIcon from \"@mui/icons-material/Coffee\";\r\nimport { Box, IconButton, Button } from \"@mui/material\";\r\n\r\nconst ReactionButtons = ({ post }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <>\r\n      <Box>\r\n        <Button\r\n          startIcon={<ThumbUpIcon sx={{ color: \"magenta\" }} />}\r\n          onClick={() =>\r\n            dispatch(\r\n              reactionAdded({\r\n                postId: post.id,\r\n                reaction: \"thumbsUp\"\r\n              })\r\n            )\r\n          }\r\n        >\r\n          {post.reactions[\"thumbsUp\"]}\r\n        </Button>\r\n        <Button\r\n          startIcon={<MoodIcon sx={{ color: \"darkorange\" }} />}\r\n          onClick={() =>\r\n            dispatch(\r\n              reactionAdded({\r\n                postId: post.id,\r\n                reaction: \"wow\"\r\n              })\r\n            )\r\n          }\r\n        >\r\n          {post.reactions[\"wow\"]}\r\n        </Button>\r\n        <Button\r\n          startIcon={<FavoriteIcon sx={{ color: \"red\" }} />}\r\n          onClick={() =>\r\n            dispatch(\r\n              reactionAdded({\r\n                postId: post.id,\r\n                reaction: \"heart\"\r\n              })\r\n            )\r\n          }\r\n        >\r\n          {post.reactions[\"heart\"]}\r\n        </Button>\r\n        <Button\r\n          startIcon={<RocketLaunchIcon sx={{ color: \"firebrick\" }} />}\r\n          onClick={() =>\r\n            dispatch(\r\n              reactionAdded({\r\n                postId: post.id,\r\n                reaction: \"rocket\"\r\n              })\r\n            )\r\n          }\r\n        >\r\n          {post.reactions[\"rocket\"]}\r\n        </Button>\r\n        <Button\r\n          startIcon={<CoffeeIcon sx={{ color: \"deeppink\" }} />}\r\n          onClick={() =>\r\n            dispatch(\r\n              reactionAdded({\r\n                postId: post.id,\r\n                reaction: \"coffee\"\r\n              })\r\n            )\r\n          }\r\n        >\r\n          {post.reactions[\"coffee\"]}\r\n        </Button>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReactionButtons;\r\n","import { useSelector } from \"react-redux\";\r\nimport { Stack, Typography, Box, Card, CardContent } from \"@mui/material\";\r\nimport { selectAllPosts } from \"./postsSlice\";\r\nimport PostAuthor from \"./PostAuthor\";\r\nimport TimeAgo from \"./TimeAgo\";\r\nimport ReactionButtons from \"./ReactionButtons\";\r\n\r\nconst PostsList = () => {\r\n  //const posts = useSelector((state) => state.posts);\r\n  const posts = useSelector(selectAllPosts);\r\n\r\n  const renderPosts = posts.map((post) => (\r\n    <Card key={post.id}>\r\n      <CardContent>\r\n        <Typography variant=\"h5\">{post.title}</Typography>\r\n        <Typography variant=\"body1\">\r\n          {post.content.substring(0, 100)}\r\n        </Typography>\r\n        <PostAuthor userId={post.userId} />\r\n        <TimeAgo timestamp={post.date} />\r\n        <ReactionButtons post={post} />\r\n      </CardContent>\r\n    </Card>\r\n  ));\r\n\r\n  return (\r\n    <>\r\n      <Stack m={2} spacing={2}>\r\n        <Typography variant=\"h4\">Posts</Typography>\r\n        <Stack spacing={2} direction=\"column-reverse\">\r\n          {renderPosts}\r\n        </Stack>\r\n      </Stack>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostsList;\r\n","import AddPost from \"./features/posts/AddPost\";\nimport PostsList from \"./features/posts/PostsList\";\n\nexport default function App() {\n  return (\n    <>\n      <AddPost />\n      <PostsList />\n    </>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { store } from \"./store\";\nimport { Provider } from \"react-redux\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </StrictMode>\n);\n"],"sourceRoot":""}